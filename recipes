# php-gzinflate
https://gchq.github.io/CyberChef/#recipe=Raw_Inflate(0,0,'Block',false,false)

# decode from hex
https://gchq.github.io/CyberChef/#recipe=From_Hex('Space')

# decode from hex
https://gchq.github.io/CyberChef/#recipe=To_Hex('Auto')

# pull domains from base64 encoded pwsh
https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)Decode_text('UTF16LE%20(1200)')Regular_expression('Domain','%5C%5Cb((?%3D%5Ba-z0-9-%5D%7B1,63%7D%5C%5C.)(xn--)?%5Ba-z0-9%5D%2B(-%5Ba-z0-9%5D%2B)*%5C%5C.)%2B%5Ba-z%5D%7B2,63%7D%5C%5Cb',true,true,false,false,false,false,'List%20matches')

# pull urls from base64 encoded pwsh
https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)Decode_text('UTF16LE%20(1200)')Regular_expression('URL','(%5BA-Za-z%5D%2B://)(%5B-%5C%5Cw%5D%2B(?:%5C%5C.%5C%5Cw%5B-%5C%5Cw%5D*)%2B)(:%5C%5Cd%2B)?(/%5B%5E.!,?%22%3C%3E%5C%5C%5B%5C%5C%5D%7B%7D%5C%5Cs%5C%5Cx7F-%5C%5CxFF%5D*(?:%5B.!,?%5D%2B%5B%5E.!,?%22%3C%3E%5C%5C%5B%5C%5C%5D%7B%7D%5C%5Cs%5C%5Cx7F-%5C%5CxFF%5D%2B)*)?',true,true,false,false,false,false,'List%20matches')

# pwsh decode with option for gunzip
https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true)Gunzip(/disabled)Decode_text('UTF16LE%20(1200)')

# extract email address
https://gchq.github.io/CyberChef/#recipe=Regular_expression('Email%20address','%5C%5Cb(%5C%5Cw%5B-.%5C%5Cw%5D*)@(%5B-%5C%5Cw%5D%2B(?:%5C%5C.%5B-%5C%5Cw%5D%2B)*)%5C%5C.(%5BA-Za-z%5D%7B2,4%7D)%5C%5Cb',true,true,false,false,false,false,'List%20matches')

# ipv4 extract

# url extract

# Emotet_PS_Obsfucation_Recipe
https://gchq.github.io/CyberChef/#recipe=Regular_expression('User%20defined','1%7B(.*?)%7D1%7B%5C'%5C%5C%2B%5C'%5C%5C(',false,false,false,false,false,false,'List%20capture%20groups')Find_/_Replace(%7B'option':'Regex','string':'%5C'%5C%5C%2B%5C''%7D,'',true,false,true,false)Reverse('Character')From_Base64('A-Za-z0-9%2B/%3D',true)Raw_Inflate(0,0,'Adaptive',false,false)Regular_expression('URL','(%5BA-Za-z%5D%2B://)(%5B-%5C%5Cw%5D%2B(?:%5C%5C.%5C%5Cw%5B-%5C%5Cw%5D*)%2B)(:%5C%5Cd%2B)?(/%5B%5E.!,?%22%3C%3E%5C%5C%5B%5C%5C%5D%7B%7D%5C%5Cs%5C%5Cx7F-%5C%5CxFF%5D*(?:%5B.!,?%5D%2B%5B%5E.!,?%22%3C%3E%5C%5C%5B%5C%5C%5D%7B%7D%5C%5Cs%5C%5Cx7F-%5C%5CxFF%5D%2B)*)?',true,true,false,false,false,false,'List%20matches')Split(',','%5C%5Cn')

#Extracting IP and port from meterpreter powershell payload:
{"op":"Regular expression","args":["User defined","[a-zA-Z0-9=/+]{30,}",true,true,false,false,false,false,"List matches"]},{"op":"From Base64","args":["A-Za-z0-9+/=",true]},{"op":"Gunzip","args":[]},{"op":"Regular expression","args":["User defined","[a-zA-Z0-9=/+]{30,}",true,true,false,false,false,false,"List matches"]},{"op":"From Base64","args":["A-Za-z0-9+/=",true]},{"op":"To Hex","args":["None"]},{"op":"Conditional Jump","args":["68([0-9a-f]{8})680200([0-9a-f]{4})",false,"standard",10]},{"op":"Conditional Jump","args":["49bc0200([0-9a-f]{4})([0-9a-f]{8})",false,"reverse",10]},{"op":"Label","args":["standard"]},{"op":"Regular expression","args":["User defined","68([0-9a-f]{8})680200([0-9a-f]{4})",true,true,false,false,false,false,"List capture groups"]},{"op":"Split","args":["\n",":"]},{"op":"Subsection","args":[":([0-9a-f]{4})$",true,true,false]},{"op":"From Base","args":[16]},{"op":"Merge","args":[]},{"op":"Subsection","args":["^([0-9a-f]{8}):",true,true,false]},{"op":"From Hex","args":["Auto"]},{"op":"To Decimal","args":["Space",false]},{"op":"Split","args":[" ","."]},{"op":"Jump","args":["finish",10]},{"op":"Label","args":["reverse"]},{"op":"Regular expression","args":["User defined","49bc0200([0-9a-f]{4})([0-9a-f]{8})",true,true,false,false,false,false,"List capture groups"]},{"op":"Split","args":["\n",":"]},{"op":"Subsection","args":[":([0-9a-f]{8})$",true,true,false]},{"op":"From Hex","args":["Auto"]},{"op":"To Decimal","args":["Space",false]},{"op":"Split","args":[" ","."]},{"op":"Subsection","args":["^([0-9a-f]{4}):",true,true,false]},{"op":"From Base","args":[16]},{"op":"Label","args":["finish"]}]
